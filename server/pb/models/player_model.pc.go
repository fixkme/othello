// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.0.0
// 	protoc        v5.27.1
// source: models/player_model.proto

package models

import (
	fmt "fmt"
	datas "github.com/fixkme/othello/server/pb/datas"
	pbext "github.com/fixkme/othello/server/pb/pbext"
	reflect "reflect"
	strings "strings"
)

// @model
// 玩家数据
type MPlayerModel struct {
	playerId int64
	// 活动信息
	modelActivity *datas.MPlayerInfo

	// 自己本身的同步key,由父对象指定
	selfSyncID string
	// 本对象所有属性的同步key数组
	fieldSyncIDs [2]string
	// 收集字典,每帧清空同步
	collector pbext.ICollector
	// 监测变化回调
	changedCb func(string)
}

// 构造函数
func NewMPlayerModel() *MPlayerModel {
	m := &MPlayerModel{}
	m.modelActivity = datas.NewMPlayerInfo()
	m.fieldSyncIDs[0] = "player_id"
	m.fieldSyncIDs[1] = "model_activity"
	return m
}

// PB构造函数
func NewPBPlayerModel() *PBPlayerModel {
	pb := &PBPlayerModel{}
	pb.ModelActivity = datas.NewPBPlayerInfo()
	return pb
}

// 设置collector函数
func (m *MPlayerModel) SetCollector(syncID string, collector pbext.ICollector, cb func(string)) {
	m.selfSyncID = syncID
	m.collector = collector
	m.changedCb = cb
	if syncID != "" {
		syncID = syncID + "."
	}
	m.fieldSyncIDs[0] = syncID + "player_id"
	m.fieldSyncIDs[1] = syncID + "model_activity"
	m.modelActivity.SetCollector(m.fieldSyncIDs[1], collector, cb)
}

// 检查数值变化函数
func (m *MPlayerModel) checkDirty(valueOld any, valueNew any, key string, ntfClient bool) bool {
	if reflect.DeepEqual(valueOld, valueNew) {
		return false
	}
	if m.collector != nil {
		m.collector.Collect(key, valueNew, ntfClient)
	}
	if m.changedCb != nil {
		m.changedCb(key)
	}
	return true
}

// ToPB函数
func (m *MPlayerModel) ToPB() *PBPlayerModel {
	if m == nil {
		return nil
	}
	pb := NewPBPlayerModel()
	pb.PlayerId = m.playerId
	pb.ModelActivity = m.modelActivity.ToPB()
	return pb
}

// InitFromPB函数
func (m *MPlayerModel) InitFromPB(pb *PBPlayerModel) {
	if pb == nil {
		return
	}
	m.playerId = pb.PlayerId
	m.modelActivity.InitFromPB(pb.ModelActivity)
}

// String 函数
func (m *MPlayerModel) String() string {
	var strBuilder strings.Builder
	strBuilder.WriteString("{")
	strBuilder.WriteString("playerId:")
	strBuilder.WriteString(fmt.Sprintf("%v", m.playerId))
	strBuilder.WriteString(", ")
	strBuilder.WriteString("modelActivity:")
	strBuilder.WriteString(m.modelActivity.String())
	strBuilder.WriteString("}")
	return strBuilder.String()
}

func (m *MPlayerModel) GetPlayerId() int64 {
	return m.playerId
}

func (m *MPlayerModel) SetPlayerId(value int64) {
	m.checkDirty(m.playerId, value, m.fieldSyncIDs[0], true)
	m.playerId = value
}

func (m *MPlayerModel) AddPlayerId(add int64) int64 {
	oldValue := m.playerId
	m.playerId += add
	m.checkDirty(oldValue, m.playerId, m.fieldSyncIDs[0], true)
	return m.playerId
}

// 活动信息
func (m *MPlayerModel) GetModelActivity() *datas.MPlayerInfo {
	return m.modelActivity
}

func (m *MPlayerModel) SetModelActivity(value *datas.MPlayerInfo) {
	if m.checkDirty(m.modelActivity, value, m.fieldSyncIDs[1], true) {
		value.SetCollector(m.fieldSyncIDs[1], m.collector, m.changedCb)
	}
	m.modelActivity = value
}
