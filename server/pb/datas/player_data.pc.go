// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.0.0
// 	protoc        v5.27.1
// source: datas/player_data.proto

package datas

import (
	fmt "fmt"
	pbext "github.com/fixkme/othello/server/pb/pbext"
	reflect "reflect"
	strings "strings"
)

type MPlayerInfo struct {
	id       int64
	name     string
	portrait string

	// 自己本身的同步key,由父对象指定
	selfSyncID string
	// 本对象所有属性的同步key数组
	fieldSyncIDs [3]string
	// 收集字典,每帧清空同步
	collector pbext.ICollector
	// 监测变化回调
	changedCb func(string)
}

// 构造函数
func NewMPlayerInfo() *MPlayerInfo {
	m := &MPlayerInfo{}
	m.fieldSyncIDs[0] = "id"
	m.fieldSyncIDs[1] = "name"
	m.fieldSyncIDs[2] = "portrait"
	return m
}

// PB构造函数
func NewPBPlayerInfo() *PBPlayerInfo {
	pb := &PBPlayerInfo{}
	return pb
}

// 设置collector函数
func (m *MPlayerInfo) SetCollector(syncID string, collector pbext.ICollector, cb func(string)) {
	m.selfSyncID = syncID
	m.collector = collector
	m.changedCb = cb
	if syncID != "" {
		syncID = syncID + "."
	}
	m.fieldSyncIDs[0] = syncID + "id"
	m.fieldSyncIDs[1] = syncID + "name"
	m.fieldSyncIDs[2] = syncID + "portrait"
}

// 检查数值变化函数
func (m *MPlayerInfo) checkDirty(valueOld any, valueNew any, key string, ntfClient bool) bool {
	if reflect.DeepEqual(valueOld, valueNew) {
		return false
	}
	if m.collector != nil {
		m.collector.Collect(key, valueNew, ntfClient)
	}
	if m.changedCb != nil {
		m.changedCb(key)
	}
	return true
}

// ToPB函数
func (m *MPlayerInfo) ToPB() *PBPlayerInfo {
	if m == nil {
		return nil
	}
	pb := NewPBPlayerInfo()
	pb.Id = m.id
	pb.Name = m.name
	pb.Portrait = m.portrait
	return pb
}

// InitFromPB函数
func (m *MPlayerInfo) InitFromPB(pb *PBPlayerInfo) {
	if pb == nil {
		return
	}
	m.id = pb.Id
	m.name = pb.Name
	m.portrait = pb.Portrait
}

// String 函数
func (m *MPlayerInfo) String() string {
	var strBuilder strings.Builder
	strBuilder.WriteString("{")
	strBuilder.WriteString("id:")
	strBuilder.WriteString(fmt.Sprintf("%v", m.id))
	strBuilder.WriteString(", ")
	strBuilder.WriteString("name:")
	strBuilder.WriteString(fmt.Sprintf("%v", m.name))
	strBuilder.WriteString(", ")
	strBuilder.WriteString("portrait:")
	strBuilder.WriteString(fmt.Sprintf("%v", m.portrait))
	strBuilder.WriteString("}")
	return strBuilder.String()
}

func (m *MPlayerInfo) GetId() int64 {
	return m.id
}

func (m *MPlayerInfo) SetId(value int64) {
	m.checkDirty(m.id, value, m.fieldSyncIDs[0], true)
	m.id = value
}

func (m *MPlayerInfo) AddId(add int64) int64 {
	oldValue := m.id
	m.id += add
	m.checkDirty(oldValue, m.id, m.fieldSyncIDs[0], true)
	return m.id
}

func (m *MPlayerInfo) GetName() string {
	return m.name
}

func (m *MPlayerInfo) SetName(value string) {
	m.checkDirty(m.name, value, m.fieldSyncIDs[1], true)
	m.name = value
}

func (m *MPlayerInfo) GetPortrait() string {
	return m.portrait
}

func (m *MPlayerInfo) SetPortrait(value string) {
	m.checkDirty(m.portrait, value, m.fieldSyncIDs[2], true)
	m.portrait = value
}
