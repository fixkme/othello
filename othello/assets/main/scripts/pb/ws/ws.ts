// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.27.1
// source: ws/ws.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../typeRegistry";

export const protobufPackage = "ws";

export interface PBPackage {
  $type: "ws.PBPackage";
  /** 消息类型 */
  messageType: string;
  /** 数据 */
  messagePayload: Uint8Array;
}

export interface WsRequestMessage {
  $type: "ws.WsRequestMessage";
  /** 消息的唯一id */
  uuid: string;
  /** request的消息名，game.CLogin */
  msgName: string;
  /** 数据 */
  payload: Uint8Array;
}

export interface WsResponseMessage {
  $type: "ws.WsResponseMessage";
  /** 和request的uuid对应 */
  uuid: string;
  /** response的消息名，game.SLogin */
  msgName: string;
  /** 数据 */
  payload: Uint8Array;
  /** 错误码, >0 表示错误 */
  errorCode: number;
  /** 错误描述, error_code>0时有效 */
  errorDesc: string;
  /** 回应带下的推送消息 */
  notices: PBPackage[];
}

function createBasePBPackage(): PBPackage {
  return { $type: "ws.PBPackage", messageType: "", messagePayload: new Uint8Array(0) };
}

export const PBPackage: MessageFns<PBPackage, "ws.PBPackage"> = {
  $type: "ws.PBPackage" as const,

  encode(message: PBPackage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageType !== "") {
      writer.uint32(10).string(message.messageType);
    }
    if (message.messagePayload.length !== 0) {
      writer.uint32(18).bytes(message.messagePayload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PBPackage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBPackage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messageType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.messagePayload = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PBPackage {
    return {
      $type: PBPackage.$type,
      messageType: isSet(object.messageType) ? globalThis.String(object.messageType) : "",
      messagePayload: isSet(object.messagePayload) ? bytesFromBase64(object.messagePayload) : new Uint8Array(0),
    };
  },

  toJSON(message: PBPackage): unknown {
    const obj: any = {};
    if (message.messageType !== "") {
      obj.messageType = message.messageType;
    }
    if (message.messagePayload.length !== 0) {
      obj.messagePayload = base64FromBytes(message.messagePayload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PBPackage>, I>>(base?: I): PBPackage {
    return PBPackage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PBPackage>, I>>(object: I): PBPackage {
    const message = createBasePBPackage();
    message.messageType = object.messageType ?? "";
    message.messagePayload = object.messagePayload ?? new Uint8Array(0);
    return message;
  },
};

messageTypeRegistry.set(PBPackage.$type, PBPackage);

function createBaseWsRequestMessage(): WsRequestMessage {
  return { $type: "ws.WsRequestMessage", uuid: "", msgName: "", payload: new Uint8Array(0) };
}

export const WsRequestMessage: MessageFns<WsRequestMessage, "ws.WsRequestMessage"> = {
  $type: "ws.WsRequestMessage" as const,

  encode(message: WsRequestMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    if (message.msgName !== "") {
      writer.uint32(18).string(message.msgName);
    }
    if (message.payload.length !== 0) {
      writer.uint32(26).bytes(message.payload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WsRequestMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWsRequestMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.msgName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.payload = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WsRequestMessage {
    return {
      $type: WsRequestMessage.$type,
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      msgName: isSet(object.msgName) ? globalThis.String(object.msgName) : "",
      payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(0),
    };
  },

  toJSON(message: WsRequestMessage): unknown {
    const obj: any = {};
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.msgName !== "") {
      obj.msgName = message.msgName;
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WsRequestMessage>, I>>(base?: I): WsRequestMessage {
    return WsRequestMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WsRequestMessage>, I>>(object: I): WsRequestMessage {
    const message = createBaseWsRequestMessage();
    message.uuid = object.uuid ?? "";
    message.msgName = object.msgName ?? "";
    message.payload = object.payload ?? new Uint8Array(0);
    return message;
  },
};

messageTypeRegistry.set(WsRequestMessage.$type, WsRequestMessage);

function createBaseWsResponseMessage(): WsResponseMessage {
  return {
    $type: "ws.WsResponseMessage",
    uuid: "",
    msgName: "",
    payload: new Uint8Array(0),
    errorCode: 0,
    errorDesc: "",
    notices: [],
  };
}

export const WsResponseMessage: MessageFns<WsResponseMessage, "ws.WsResponseMessage"> = {
  $type: "ws.WsResponseMessage" as const,

  encode(message: WsResponseMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    if (message.msgName !== "") {
      writer.uint32(18).string(message.msgName);
    }
    if (message.payload.length !== 0) {
      writer.uint32(26).bytes(message.payload);
    }
    if (message.errorCode !== 0) {
      writer.uint32(32).int32(message.errorCode);
    }
    if (message.errorDesc !== "") {
      writer.uint32(42).string(message.errorDesc);
    }
    for (const v of message.notices) {
      PBPackage.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WsResponseMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWsResponseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.msgName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.payload = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.errorCode = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.errorDesc = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.notices.push(PBPackage.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WsResponseMessage {
    return {
      $type: WsResponseMessage.$type,
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      msgName: isSet(object.msgName) ? globalThis.String(object.msgName) : "",
      payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(0),
      errorCode: isSet(object.errorCode) ? globalThis.Number(object.errorCode) : 0,
      errorDesc: isSet(object.errorDesc) ? globalThis.String(object.errorDesc) : "",
      notices: globalThis.Array.isArray(object?.notices) ? object.notices.map((e: any) => PBPackage.fromJSON(e)) : [],
    };
  },

  toJSON(message: WsResponseMessage): unknown {
    const obj: any = {};
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.msgName !== "") {
      obj.msgName = message.msgName;
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    if (message.errorCode !== 0) {
      obj.errorCode = Math.round(message.errorCode);
    }
    if (message.errorDesc !== "") {
      obj.errorDesc = message.errorDesc;
    }
    if (message.notices?.length) {
      obj.notices = message.notices.map((e) => PBPackage.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WsResponseMessage>, I>>(base?: I): WsResponseMessage {
    return WsResponseMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WsResponseMessage>, I>>(object: I): WsResponseMessage {
    const message = createBaseWsResponseMessage();
    message.uuid = object.uuid ?? "";
    message.msgName = object.msgName ?? "";
    message.payload = object.payload ?? new Uint8Array(0);
    message.errorCode = object.errorCode ?? 0;
    message.errorDesc = object.errorDesc ?? "";
    message.notices = object.notices?.map((e) => PBPackage.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(WsResponseMessage.$type, WsResponseMessage);

function bytesFromBase64(b64: string): Uint8Array {
  const bin = globalThis.atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  arr.forEach((byte) => {
    bin.push(globalThis.String.fromCharCode(byte));
  });
  return globalThis.btoa(bin.join(""));
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
