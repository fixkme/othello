// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.27.1
// source: datas/player_data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../typeRegistry";

export const protobufPackage = "datas";

export interface PlayerInfo {
  $type: "datas.PlayerInfo";
  id: number;
  account: string;
  name: string;
  portrait: string;
  playPieceType: number;
}

export interface PieceInfo {
  $type: "datas.PieceInfo";
  x: number;
  y: number;
  color: number;
}

export interface TableInfo {
  $type: "datas.TableInfo";
  id: number;
  /** 房主 */
  ownerPlayer:
    | PlayerInfo
    | undefined;
  /** 对手 */
  oppoPlayer: PlayerInfo | undefined;
  status: number;
  /** 当前操作方 */
  turn: number;
  blackCount: number;
  whiteCount: number;
  pieces: PieceInfo[];
  createdTime: number;
}

function createBasePlayerInfo(): PlayerInfo {
  return { $type: "datas.PlayerInfo", id: 0, account: "", name: "", portrait: "", playPieceType: 0 };
}

export const PlayerInfo: MessageFns<PlayerInfo, "datas.PlayerInfo"> = {
  $type: "datas.PlayerInfo" as const,

  encode(message: PlayerInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    if (message.account !== "") {
      writer.uint32(18).string(message.account);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.portrait !== "") {
      writer.uint32(34).string(message.portrait);
    }
    if (message.playPieceType !== 0) {
      writer.uint32(40).int64(message.playPieceType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.account = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.portrait = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.playPieceType = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerInfo {
    return {
      $type: PlayerInfo.$type,
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      portrait: isSet(object.portrait) ? globalThis.String(object.portrait) : "",
      playPieceType: isSet(object.playPieceType) ? globalThis.Number(object.playPieceType) : 0,
    };
  },

  toJSON(message: PlayerInfo): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.portrait !== "") {
      obj.portrait = message.portrait;
    }
    if (message.playPieceType !== 0) {
      obj.playPieceType = Math.round(message.playPieceType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerInfo>, I>>(base?: I): PlayerInfo {
    return PlayerInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerInfo>, I>>(object: I): PlayerInfo {
    const message = createBasePlayerInfo();
    message.id = object.id ?? 0;
    message.account = object.account ?? "";
    message.name = object.name ?? "";
    message.portrait = object.portrait ?? "";
    message.playPieceType = object.playPieceType ?? 0;
    return message;
  },
};

messageTypeRegistry.set(PlayerInfo.$type, PlayerInfo);

function createBasePieceInfo(): PieceInfo {
  return { $type: "datas.PieceInfo", x: 0, y: 0, color: 0 };
}

export const PieceInfo: MessageFns<PieceInfo, "datas.PieceInfo"> = {
  $type: "datas.PieceInfo" as const,

  encode(message: PieceInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(8).int32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(16).int32(message.y);
    }
    if (message.color !== 0) {
      writer.uint32(24).int32(message.color);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PieceInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePieceInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.x = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.y = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.color = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PieceInfo {
    return {
      $type: PieceInfo.$type,
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
      color: isSet(object.color) ? globalThis.Number(object.color) : 0,
    };
  },

  toJSON(message: PieceInfo): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    if (message.color !== 0) {
      obj.color = Math.round(message.color);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PieceInfo>, I>>(base?: I): PieceInfo {
    return PieceInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PieceInfo>, I>>(object: I): PieceInfo {
    const message = createBasePieceInfo();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.color = object.color ?? 0;
    return message;
  },
};

messageTypeRegistry.set(PieceInfo.$type, PieceInfo);

function createBaseTableInfo(): TableInfo {
  return {
    $type: "datas.TableInfo",
    id: 0,
    ownerPlayer: undefined,
    oppoPlayer: undefined,
    status: 0,
    turn: 0,
    blackCount: 0,
    whiteCount: 0,
    pieces: [],
    createdTime: 0,
  };
}

export const TableInfo: MessageFns<TableInfo, "datas.TableInfo"> = {
  $type: "datas.TableInfo" as const,

  encode(message: TableInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    if (message.ownerPlayer !== undefined) {
      PlayerInfo.encode(message.ownerPlayer, writer.uint32(18).fork()).join();
    }
    if (message.oppoPlayer !== undefined) {
      PlayerInfo.encode(message.oppoPlayer, writer.uint32(26).fork()).join();
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.turn !== 0) {
      writer.uint32(40).int32(message.turn);
    }
    if (message.blackCount !== 0) {
      writer.uint32(48).int32(message.blackCount);
    }
    if (message.whiteCount !== 0) {
      writer.uint32(56).int32(message.whiteCount);
    }
    for (const v of message.pieces) {
      PieceInfo.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.createdTime !== 0) {
      writer.uint32(80).int64(message.createdTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TableInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTableInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ownerPlayer = PlayerInfo.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.oppoPlayer = PlayerInfo.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.turn = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.blackCount = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.whiteCount = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.pieces.push(PieceInfo.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.createdTime = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TableInfo {
    return {
      $type: TableInfo.$type,
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      ownerPlayer: isSet(object.ownerPlayer) ? PlayerInfo.fromJSON(object.ownerPlayer) : undefined,
      oppoPlayer: isSet(object.oppoPlayer) ? PlayerInfo.fromJSON(object.oppoPlayer) : undefined,
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      turn: isSet(object.turn) ? globalThis.Number(object.turn) : 0,
      blackCount: isSet(object.blackCount) ? globalThis.Number(object.blackCount) : 0,
      whiteCount: isSet(object.whiteCount) ? globalThis.Number(object.whiteCount) : 0,
      pieces: globalThis.Array.isArray(object?.pieces) ? object.pieces.map((e: any) => PieceInfo.fromJSON(e)) : [],
      createdTime: isSet(object.createdTime) ? globalThis.Number(object.createdTime) : 0,
    };
  },

  toJSON(message: TableInfo): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.ownerPlayer !== undefined) {
      obj.ownerPlayer = PlayerInfo.toJSON(message.ownerPlayer);
    }
    if (message.oppoPlayer !== undefined) {
      obj.oppoPlayer = PlayerInfo.toJSON(message.oppoPlayer);
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.turn !== 0) {
      obj.turn = Math.round(message.turn);
    }
    if (message.blackCount !== 0) {
      obj.blackCount = Math.round(message.blackCount);
    }
    if (message.whiteCount !== 0) {
      obj.whiteCount = Math.round(message.whiteCount);
    }
    if (message.pieces?.length) {
      obj.pieces = message.pieces.map((e) => PieceInfo.toJSON(e));
    }
    if (message.createdTime !== 0) {
      obj.createdTime = Math.round(message.createdTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TableInfo>, I>>(base?: I): TableInfo {
    return TableInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TableInfo>, I>>(object: I): TableInfo {
    const message = createBaseTableInfo();
    message.id = object.id ?? 0;
    message.ownerPlayer = (object.ownerPlayer !== undefined && object.ownerPlayer !== null)
      ? PlayerInfo.fromPartial(object.ownerPlayer)
      : undefined;
    message.oppoPlayer = (object.oppoPlayer !== undefined && object.oppoPlayer !== null)
      ? PlayerInfo.fromPartial(object.oppoPlayer)
      : undefined;
    message.status = object.status ?? 0;
    message.turn = object.turn ?? 0;
    message.blackCount = object.blackCount ?? 0;
    message.whiteCount = object.whiteCount ?? 0;
    message.pieces = object.pieces?.map((e) => PieceInfo.fromPartial(e)) || [];
    message.createdTime = object.createdTime ?? 0;
    return message;
  },
};

messageTypeRegistry.set(TableInfo.$type, TableInfo);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
