// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.27.1
// source: game/player.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PlayerInfo, TableInfo } from "../datas/player_data";
import { PlayerModel } from "../models/player_model";
import { messageTypeRegistry } from "../typeRegistry";

export const protobufPackage = "game";

export interface CLogin {
  $type: "game.CLogin";
  account: string;
}

export interface SLogin {
  $type: "game.SLogin";
  playerData: PlayerModel | undefined;
  serverTz: number;
  /** >0表示在房间中 */
  tableId: number;
}

export interface CEnterGame {
  $type: "game.CEnterGame";
}

export interface SEnterGame {
  $type: "game.SEnterGame";
  tableInfo: TableInfo | undefined;
}

export interface PPlayerEnterGame {
  $type: "game.PPlayerEnterGame";
  playerInfo: PlayerInfo | undefined;
}

export interface CLeaveGame {
  $type: "game.CLeaveGame";
}

export interface SLeaveGame {
  $type: "game.SLeaveGame";
}

export interface CPlacePiece {
  $type: "game.CPlacePiece";
  pieceType: number;
  x: number;
  y: number;
}

export interface SPlacePiece {
  $type: "game.SPlacePiece";
}

export interface PPlacePiece {
  $type: "game.PPlacePiece";
  pieceType: number;
  x: number;
  y: number;
  /** 当前操作的棋子 */
  operatePiece: number;
}

export interface PGameResult {
  $type: "game.PGameResult";
  winner: number;
  loser: number;
  isGiveUp: boolean;
}

function createBaseCLogin(): CLogin {
  return { $type: "game.CLogin", account: "" };
}

export const CLogin: MessageFns<CLogin, "game.CLogin"> = {
  $type: "game.CLogin" as const,

  encode(message: CLogin, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.account !== "") {
      writer.uint32(10).string(message.account);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CLogin {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCLogin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.account = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CLogin {
    return { $type: CLogin.$type, account: isSet(object.account) ? globalThis.String(object.account) : "" };
  },

  toJSON(message: CLogin): unknown {
    const obj: any = {};
    if (message.account !== "") {
      obj.account = message.account;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CLogin>, I>>(base?: I): CLogin {
    return CLogin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CLogin>, I>>(object: I): CLogin {
    const message = createBaseCLogin();
    message.account = object.account ?? "";
    return message;
  },
};

messageTypeRegistry.set(CLogin.$type, CLogin);

function createBaseSLogin(): SLogin {
  return { $type: "game.SLogin", playerData: undefined, serverTz: 0, tableId: 0 };
}

export const SLogin: MessageFns<SLogin, "game.SLogin"> = {
  $type: "game.SLogin" as const,

  encode(message: SLogin, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerData !== undefined) {
      PlayerModel.encode(message.playerData, writer.uint32(10).fork()).join();
    }
    if (message.serverTz !== 0) {
      writer.uint32(16).int64(message.serverTz);
    }
    if (message.tableId !== 0) {
      writer.uint32(24).int64(message.tableId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SLogin {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSLogin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerData = PlayerModel.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.serverTz = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.tableId = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SLogin {
    return {
      $type: SLogin.$type,
      playerData: isSet(object.playerData) ? PlayerModel.fromJSON(object.playerData) : undefined,
      serverTz: isSet(object.serverTz) ? globalThis.Number(object.serverTz) : 0,
      tableId: isSet(object.tableId) ? globalThis.Number(object.tableId) : 0,
    };
  },

  toJSON(message: SLogin): unknown {
    const obj: any = {};
    if (message.playerData !== undefined) {
      obj.playerData = PlayerModel.toJSON(message.playerData);
    }
    if (message.serverTz !== 0) {
      obj.serverTz = Math.round(message.serverTz);
    }
    if (message.tableId !== 0) {
      obj.tableId = Math.round(message.tableId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SLogin>, I>>(base?: I): SLogin {
    return SLogin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SLogin>, I>>(object: I): SLogin {
    const message = createBaseSLogin();
    message.playerData = (object.playerData !== undefined && object.playerData !== null)
      ? PlayerModel.fromPartial(object.playerData)
      : undefined;
    message.serverTz = object.serverTz ?? 0;
    message.tableId = object.tableId ?? 0;
    return message;
  },
};

messageTypeRegistry.set(SLogin.$type, SLogin);

function createBaseCEnterGame(): CEnterGame {
  return { $type: "game.CEnterGame" };
}

export const CEnterGame: MessageFns<CEnterGame, "game.CEnterGame"> = {
  $type: "game.CEnterGame" as const,

  encode(_: CEnterGame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CEnterGame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCEnterGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CEnterGame {
    return { $type: CEnterGame.$type };
  },

  toJSON(_: CEnterGame): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CEnterGame>, I>>(base?: I): CEnterGame {
    return CEnterGame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CEnterGame>, I>>(_: I): CEnterGame {
    const message = createBaseCEnterGame();
    return message;
  },
};

messageTypeRegistry.set(CEnterGame.$type, CEnterGame);

function createBaseSEnterGame(): SEnterGame {
  return { $type: "game.SEnterGame", tableInfo: undefined };
}

export const SEnterGame: MessageFns<SEnterGame, "game.SEnterGame"> = {
  $type: "game.SEnterGame" as const,

  encode(message: SEnterGame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tableInfo !== undefined) {
      TableInfo.encode(message.tableInfo, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SEnterGame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSEnterGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tableInfo = TableInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SEnterGame {
    return {
      $type: SEnterGame.$type,
      tableInfo: isSet(object.tableInfo) ? TableInfo.fromJSON(object.tableInfo) : undefined,
    };
  },

  toJSON(message: SEnterGame): unknown {
    const obj: any = {};
    if (message.tableInfo !== undefined) {
      obj.tableInfo = TableInfo.toJSON(message.tableInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SEnterGame>, I>>(base?: I): SEnterGame {
    return SEnterGame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SEnterGame>, I>>(object: I): SEnterGame {
    const message = createBaseSEnterGame();
    message.tableInfo = (object.tableInfo !== undefined && object.tableInfo !== null)
      ? TableInfo.fromPartial(object.tableInfo)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(SEnterGame.$type, SEnterGame);

function createBasePPlayerEnterGame(): PPlayerEnterGame {
  return { $type: "game.PPlayerEnterGame", playerInfo: undefined };
}

export const PPlayerEnterGame: MessageFns<PPlayerEnterGame, "game.PPlayerEnterGame"> = {
  $type: "game.PPlayerEnterGame" as const,

  encode(message: PPlayerEnterGame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerInfo !== undefined) {
      PlayerInfo.encode(message.playerInfo, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PPlayerEnterGame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePPlayerEnterGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerInfo = PlayerInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PPlayerEnterGame {
    return {
      $type: PPlayerEnterGame.$type,
      playerInfo: isSet(object.playerInfo) ? PlayerInfo.fromJSON(object.playerInfo) : undefined,
    };
  },

  toJSON(message: PPlayerEnterGame): unknown {
    const obj: any = {};
    if (message.playerInfo !== undefined) {
      obj.playerInfo = PlayerInfo.toJSON(message.playerInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PPlayerEnterGame>, I>>(base?: I): PPlayerEnterGame {
    return PPlayerEnterGame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PPlayerEnterGame>, I>>(object: I): PPlayerEnterGame {
    const message = createBasePPlayerEnterGame();
    message.playerInfo = (object.playerInfo !== undefined && object.playerInfo !== null)
      ? PlayerInfo.fromPartial(object.playerInfo)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(PPlayerEnterGame.$type, PPlayerEnterGame);

function createBaseCLeaveGame(): CLeaveGame {
  return { $type: "game.CLeaveGame" };
}

export const CLeaveGame: MessageFns<CLeaveGame, "game.CLeaveGame"> = {
  $type: "game.CLeaveGame" as const,

  encode(_: CLeaveGame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CLeaveGame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCLeaveGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CLeaveGame {
    return { $type: CLeaveGame.$type };
  },

  toJSON(_: CLeaveGame): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CLeaveGame>, I>>(base?: I): CLeaveGame {
    return CLeaveGame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CLeaveGame>, I>>(_: I): CLeaveGame {
    const message = createBaseCLeaveGame();
    return message;
  },
};

messageTypeRegistry.set(CLeaveGame.$type, CLeaveGame);

function createBaseSLeaveGame(): SLeaveGame {
  return { $type: "game.SLeaveGame" };
}

export const SLeaveGame: MessageFns<SLeaveGame, "game.SLeaveGame"> = {
  $type: "game.SLeaveGame" as const,

  encode(_: SLeaveGame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SLeaveGame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSLeaveGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SLeaveGame {
    return { $type: SLeaveGame.$type };
  },

  toJSON(_: SLeaveGame): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SLeaveGame>, I>>(base?: I): SLeaveGame {
    return SLeaveGame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SLeaveGame>, I>>(_: I): SLeaveGame {
    const message = createBaseSLeaveGame();
    return message;
  },
};

messageTypeRegistry.set(SLeaveGame.$type, SLeaveGame);

function createBaseCPlacePiece(): CPlacePiece {
  return { $type: "game.CPlacePiece", pieceType: 0, x: 0, y: 0 };
}

export const CPlacePiece: MessageFns<CPlacePiece, "game.CPlacePiece"> = {
  $type: "game.CPlacePiece" as const,

  encode(message: CPlacePiece, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pieceType !== 0) {
      writer.uint32(8).int32(message.pieceType);
    }
    if (message.x !== 0) {
      writer.uint32(16).int32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(24).int32(message.y);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CPlacePiece {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCPlacePiece();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pieceType = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.x = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.y = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CPlacePiece {
    return {
      $type: CPlacePiece.$type,
      pieceType: isSet(object.pieceType) ? globalThis.Number(object.pieceType) : 0,
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: CPlacePiece): unknown {
    const obj: any = {};
    if (message.pieceType !== 0) {
      obj.pieceType = Math.round(message.pieceType);
    }
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CPlacePiece>, I>>(base?: I): CPlacePiece {
    return CPlacePiece.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CPlacePiece>, I>>(object: I): CPlacePiece {
    const message = createBaseCPlacePiece();
    message.pieceType = object.pieceType ?? 0;
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

messageTypeRegistry.set(CPlacePiece.$type, CPlacePiece);

function createBaseSPlacePiece(): SPlacePiece {
  return { $type: "game.SPlacePiece" };
}

export const SPlacePiece: MessageFns<SPlacePiece, "game.SPlacePiece"> = {
  $type: "game.SPlacePiece" as const,

  encode(_: SPlacePiece, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SPlacePiece {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSPlacePiece();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SPlacePiece {
    return { $type: SPlacePiece.$type };
  },

  toJSON(_: SPlacePiece): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SPlacePiece>, I>>(base?: I): SPlacePiece {
    return SPlacePiece.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SPlacePiece>, I>>(_: I): SPlacePiece {
    const message = createBaseSPlacePiece();
    return message;
  },
};

messageTypeRegistry.set(SPlacePiece.$type, SPlacePiece);

function createBasePPlacePiece(): PPlacePiece {
  return { $type: "game.PPlacePiece", pieceType: 0, x: 0, y: 0, operatePiece: 0 };
}

export const PPlacePiece: MessageFns<PPlacePiece, "game.PPlacePiece"> = {
  $type: "game.PPlacePiece" as const,

  encode(message: PPlacePiece, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pieceType !== 0) {
      writer.uint32(8).int32(message.pieceType);
    }
    if (message.x !== 0) {
      writer.uint32(16).int32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(24).int32(message.y);
    }
    if (message.operatePiece !== 0) {
      writer.uint32(32).int32(message.operatePiece);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PPlacePiece {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePPlacePiece();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pieceType = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.x = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.y = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.operatePiece = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PPlacePiece {
    return {
      $type: PPlacePiece.$type,
      pieceType: isSet(object.pieceType) ? globalThis.Number(object.pieceType) : 0,
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
      operatePiece: isSet(object.operatePiece) ? globalThis.Number(object.operatePiece) : 0,
    };
  },

  toJSON(message: PPlacePiece): unknown {
    const obj: any = {};
    if (message.pieceType !== 0) {
      obj.pieceType = Math.round(message.pieceType);
    }
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    if (message.operatePiece !== 0) {
      obj.operatePiece = Math.round(message.operatePiece);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PPlacePiece>, I>>(base?: I): PPlacePiece {
    return PPlacePiece.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PPlacePiece>, I>>(object: I): PPlacePiece {
    const message = createBasePPlacePiece();
    message.pieceType = object.pieceType ?? 0;
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.operatePiece = object.operatePiece ?? 0;
    return message;
  },
};

messageTypeRegistry.set(PPlacePiece.$type, PPlacePiece);

function createBasePGameResult(): PGameResult {
  return { $type: "game.PGameResult", winner: 0, loser: 0, isGiveUp: false };
}

export const PGameResult: MessageFns<PGameResult, "game.PGameResult"> = {
  $type: "game.PGameResult" as const,

  encode(message: PGameResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.winner !== 0) {
      writer.uint32(8).int64(message.winner);
    }
    if (message.loser !== 0) {
      writer.uint32(16).int64(message.loser);
    }
    if (message.isGiveUp !== false) {
      writer.uint32(24).bool(message.isGiveUp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PGameResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePGameResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.winner = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.loser = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isGiveUp = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PGameResult {
    return {
      $type: PGameResult.$type,
      winner: isSet(object.winner) ? globalThis.Number(object.winner) : 0,
      loser: isSet(object.loser) ? globalThis.Number(object.loser) : 0,
      isGiveUp: isSet(object.isGiveUp) ? globalThis.Boolean(object.isGiveUp) : false,
    };
  },

  toJSON(message: PGameResult): unknown {
    const obj: any = {};
    if (message.winner !== 0) {
      obj.winner = Math.round(message.winner);
    }
    if (message.loser !== 0) {
      obj.loser = Math.round(message.loser);
    }
    if (message.isGiveUp !== false) {
      obj.isGiveUp = message.isGiveUp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PGameResult>, I>>(base?: I): PGameResult {
    return PGameResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PGameResult>, I>>(object: I): PGameResult {
    const message = createBasePGameResult();
    message.winner = object.winner ?? 0;
    message.loser = object.loser ?? 0;
    message.isGiveUp = object.isGiveUp ?? false;
    return message;
  },
};

messageTypeRegistry.set(PGameResult.$type, PGameResult);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
