// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.27.1
// source: game/player.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PlayerModel } from "../models/player_model";

export const protobufPackage = "game";

export interface CLogin {
  playerId: number;
}

export interface SLogin {
  playerData: PlayerModel | undefined;
  serverTz: number;
}

function createBaseCLogin(): CLogin {
  return { playerId: 0 };
}

export const CLogin: MessageFns<CLogin> = {
  encode(message: CLogin, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== 0) {
      writer.uint32(8).int64(message.playerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CLogin {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCLogin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.playerId = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CLogin {
    return { playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0 };
  },

  toJSON(message: CLogin): unknown {
    const obj: any = {};
    if (message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CLogin>, I>>(base?: I): CLogin {
    return CLogin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CLogin>, I>>(object: I): CLogin {
    const message = createBaseCLogin();
    message.playerId = object.playerId ?? 0;
    return message;
  },
};

function createBaseSLogin(): SLogin {
  return { playerData: undefined, serverTz: 0 };
}

export const SLogin: MessageFns<SLogin> = {
  encode(message: SLogin, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerData !== undefined) {
      PlayerModel.encode(message.playerData, writer.uint32(10).fork()).join();
    }
    if (message.serverTz !== 0) {
      writer.uint32(16).int64(message.serverTz);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SLogin {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSLogin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerData = PlayerModel.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.serverTz = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SLogin {
    return {
      playerData: isSet(object.playerData) ? PlayerModel.fromJSON(object.playerData) : undefined,
      serverTz: isSet(object.serverTz) ? globalThis.Number(object.serverTz) : 0,
    };
  },

  toJSON(message: SLogin): unknown {
    const obj: any = {};
    if (message.playerData !== undefined) {
      obj.playerData = PlayerModel.toJSON(message.playerData);
    }
    if (message.serverTz !== 0) {
      obj.serverTz = Math.round(message.serverTz);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SLogin>, I>>(base?: I): SLogin {
    return SLogin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SLogin>, I>>(object: I): SLogin {
    const message = createBaseSLogin();
    message.playerData = (object.playerData !== undefined && object.playerData !== null)
      ? PlayerModel.fromPartial(object.playerData)
      : undefined;
    message.serverTz = object.serverTz ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
